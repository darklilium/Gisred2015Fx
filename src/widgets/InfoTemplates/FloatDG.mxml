<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Version 2.2.2 - Mar 30, 2011
//
// Delevoped by Robert Scheitlin
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:TitleWindow  xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"  
				width=				"622" 
				height=				"300"   
				title=              "Related Features: "
				close=				"closeMe()"
				skinClass=			"widgets.InfoTemplates.FloatDGSkin"
				creationComplete=	"init()">
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" />
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IViewCursor;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.controls.LinkButton;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.Repeater;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			
			private var _data:Object;
			private var _resultsGrid:DataGrid;
			private var _dgColumns:Object;
			private var _csvSep:String = ",";
			private var _csvName:String;
			
			[Bindable]
			private var _title:String;
			[Bindable]
			private var _exp2csvBtnLbl:String;
			[Bindable]
			private var _exp2txtBtnLbl:String;
			[Bindable]
			private var _exportButtonLbl:String;
			
			private var uic:UIComponent;
			
			public function set dgtitle(value:String):void
			{
				_title = value;
				this.title = "Related " + _title + " Features" ;
			}
			
			public function set dProvider(value:Object):void
			{
				_data = value;
				resultsGrid.dataProvider = calcMaxLengths(_data);				
				setFieldAliases();
			}
			
			private function date_sortCompareFunc(itemA:Object, itemB:Object, fields:Array = null):int {
				var dateA:Date = new Date(Date.parse(itemA.COMPLETION));
				var dateB:Date = new Date(Date.parse(itemB.COMPLETION));
				return ObjectUtil.dateCompare(dateA, dateB);
			}
			
			public function set dgColumns(value:Object):void
			{
				_dgColumns = value;
			}
			
			private function init():void
			{
				_resultsGrid = resultsGrid;
			}
			
			public function get datagrid():DataGrid
			{
				return _resultsGrid;
			}
			
			private function closeMe():void
			{
				PopUpManager.removePopUp(this);
			}
			
			public function set csvName(value:String):void
			{
				_csvName = value;
			}
			
			public function set csvSeperator(value:String):void
			{
				_csvSep = value;
			}
			
			public function set csvExportOptionLbl(value:String):void
			{
				_exp2csvBtnLbl = value;
			}
			
			public function set txtExportOptionLbl(value:String):void
			{
				_exp2txtBtnLbl = value;
			}
			
			public function set ExportButtonLbl(value:String):void
			{
				_exportButtonLbl = value;
			}
			
			private function exportTo(event:Event):void
			{
				try
				{
					var data:String;
					var defaultFileName:String;
					if(optiongroup.selectedValue == _exp2csvBtnLbl){
						data = exportCSV(resultsGrid,_csvSep);
						defaultFileName = _csvName + ".csv";
					}else{
						data = exportTXT(resultsGrid);
						defaultFileName = _csvName + ".txt";
					}
					
					var fileReference:FileReference = new FileReference();
					fileReference.save(data,defaultFileName);
				}
				catch(error:Error)
				{
					Alert.show(error.message);
				}
			}
			
			private function exportCSV(dataGrid:DataGrid, csvSeparator:String=",", lineSeparator:String="\n"):String
			{
				try
				{
					var data:String = "";
					var columnArray:Array = dataGrid.columns;
					var columnCount:int = columnArray.length;
					var dataGridColumn:DataGridColumn;
					var header:String = "";
					var headerGenerated:Boolean = false;
					var dataProvider:Object = ObjectUtil.copy(dataGrid.dataProvider);
					
					//trace(ObjectUtil.toString(dataProvider));
					var rowCount:int = dataProvider.length;
					var dp:Object = null;
					var cursor:IViewCursor = dataProvider.createCursor();
					var j:int = 0;
					
					//loop through rows
					while (!cursor.afterLast)
					{
						var object:Object = null;
						object = cursor.current;
						//loop through all columns for the row
						for(var i:int = 0; i < columnCount; i++)
						{
							dataGridColumn = columnArray[i];
							//Exclude column data which is invisible (hidden)
							if(!dataGridColumn.visible)
							{
								continue;
							}
							if(dataGridColumn.itemRenderer)
							{
								data += "\""+ object[dataGridColumn.dataField] + "\"";
							}else{
								data += "\""+ dataGridColumn.itemToLabel(object)+ "\"";
							}
							if(i < (columnCount -1))
							{
								data += csvSeparator;
							}
							//generate header of CSV, only if it's not genereted yet
							if (!headerGenerated)
							{
								header += "\"" + dataGridColumn.headerText + "\"";
								if (i < columnCount - 1)
								{
									header += csvSeparator;
								}
							}
						}
						headerGenerated = true;
						if (j < (rowCount - 1))
						{
							data += lineSeparator;
						}
						j++;
						cursor.moveNext ();
					}
					//set references to null:
					dataProvider = null;
					columnArray = null;
					dataGridColumn = null;		
				}
				catch(error:Error)
				{
					return null;
					Alert.show(error.message);
				}
				return (header + lineSeparator + data);
			}
			
			private function exportTXT(dataGrid:DataGrid, lineSeparator:String="\n"):String
			{
				try
				{
					var data:String = "";
					var columnArray:Array = dataGrid.columns;
					var columnCount:int = columnArray.length;
					var dataGridColumn:DataGridColumn;
					var header:String = "";
					var headerGenerated:Boolean = false;
					var dataProvider:Object = ObjectUtil.copy(dataGrid.dataProvider);
					
					var rowCount:int = dataProvider.length;
					var dp:Object = null;
					var cursor:IViewCursor = dataProvider.createCursor();
					var j:int = 0;
					
					//loop through rows
					while (!cursor.afterLast)
					{
						var object:Object = null;
						object = cursor.current;
						//loop through all columns for the row
						for(var i:int = 0; i < columnCount; i++)
						{
							dataGridColumn = columnArray[i];
							//Exclude column data which is invisible (hidden)
							if(!dataGridColumn.visible)
							{
								continue;
							}
							if(dataGridColumn.itemRenderer)
							{
								data += "\""+ object[dataGridColumn.dataField] + "\"";
							}else{
								data += "\""+ dataGridColumn.itemToLabel(object)+ "\"";
							}
							if(i < (columnCount -1))
							{
								data += "\t";
							}
							//generate header of CSV, only if it's not genereted yet
							if (!headerGenerated)
							{
								header += "\"" + dataGridColumn.headerText + "\"";
								if (i < columnCount - 1)
								{
									header += "\t";
								}
							}
						}
						headerGenerated = true;
						if (j < (rowCount - 1))
						{
							data += lineSeparator;
						}
						j++;
						cursor.moveNext ();
					}
					//set references to null:
					dataProvider = null;
					columnArray = null;
					dataGridColumn = null;		
				}
				
				catch(error:Error)
				{
					return null;
					Alert.show(error.message);
				}
				return (header + lineSeparator + data);
			}
			
			protected function setFieldAliases():void
			{			
				var colm:DataGridColumn;
				for each (colm in resultsGrid.columns){
					var obj:Object;
					for each (obj in _dgColumns){
						//trace(ObjectUtil.toString(obj));
						if(colm.dataField == obj.name){
							colm.headerText = obj.alias;
						}
//My Add
						if(colm.dataField == "COMPLETION"){
							colm.sortCompareFunction = date_sortCompareFunc;
						}
//End My Add
					}
				}
				
//My Add
				var sortDate:Sort = new Sort();
				sortDate.compareFunction = date_sortCompareFunc;
				var dgAc:ArrayCollection = resultsGrid.dataProvider as ArrayCollection;
				dgAc.sort = sortDate;
				dgAc.refresh();
//End My Add
			}
			
			// this is going to be executed whenever the data provider changes:
			[Bindable("dataChange")]
			private function calcMaxLengths(input:Object):Object {
				// if there are items in the DP:
				if ( input.length > 0 ) {
					// and no SPECIAL child exists:
					if ( getChildByName("$someTempUICToRemoveAfterFinished") == null ) {
						// create new SPECIAL child
						// this is required to call measureText
						// if you use custom data grid item renderer
						// then create instance of it instead of UIComponent:
						uic = new UIComponent();
						// do not show and do not mess with the sizes:
						uic.includeInLayout = false;
						uic.visible = false;
						// name it to leverage get getChildByName method:
						uic.name = "$someTempUICToRemoveAfterFinished";
						// add event listener:
						uic.addEventListener(FlexEvent.CREATION_COMPLETE, onTempUICCreated);
						// add to parent:
						this.addElement(uic);
					}
				}
				// return an input:
				return input;
			}
			
			// called when SPECIAL child is created:
			private function onTempUICCreated(event:FlexEvent):void {
				// keep the ref to the SPECIAL child:
				var renderer:UIComponent = UIComponent(event.target);
				// output - this will contain max size for each column:
				var maxLengths:Object = {};
				// temp variables:
				var key:String = "";
				var i:int=0;
				var dp:Object = resultsGrid.dataProvider;
				// for each item in the DP:
				for ( i=0; i<dp.length; i++ ) {
					var o:Object = dp[i];
					// for each key in the DP row:
					for ( key in o ) {
						// if the output doesn't have current key yet create it and set to 0:
						if ( !maxLengths.hasOwnProperty(key) ) {
							maxLengths[key] = 0;
						}
						// check if it's simple object (may cause unexpected issues for Boolean):
						if ( ObjectUtil.isSimple(o[key]) ) {
							// measure the text:
							var cellMetrics:TextLineMetrics = renderer.measureText(o[key]+"");
							// and if the width is greater than longest found up to now:
							if ( cellMetrics.width > maxLengths[key] ) {
								// set it as the longest one:
								maxLengths[key] = cellMetrics.width;
							}
						}
					}
				}
				
				// apply column sizes:
				for ( key in maxLengths ) {
					for ( i=0; i<resultsGrid.columnCount; i++ ) {
						// if the column actually exists:
						if ( DataGridColumn(resultsGrid.columns[i]).dataField == key ) {
							var cellMetrics2:TextLineMetrics = renderer.measureText(key+"");
							var cellMetrics3:TextLineMetrics = renderer.measureText(DataGridColumn(resultsGrid.columns[i]).headerText+"");
							if ( cellMetrics2.width + 18 > Number(maxLengths[key]) + 12 ) {
								if (cellMetrics2.width + 18 < cellMetrics3.width + 18){
									DataGridColumn(resultsGrid.columns[i]).width = cellMetrics3.width + 18
								}else{ 
									DataGridColumn(resultsGrid.columns[i]).width = cellMetrics2.width + 18;
								}
							} else {
								if (Number(maxLengths[key]) + 12 < cellMetrics3.width + 18){
									DataGridColumn(resultsGrid.columns[i]).width = cellMetrics3.width + 18
								}else{ 
									DataGridColumn(resultsGrid.columns[i]).width = Number(maxLengths[key]) + 12;
								}
							}							
						}
					}
				}
				// cleanup:
				try{
					removeElement(uic);
				}catch (error: Error){}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="optiongroup"/>
	</fx:Declarations>
	<mx:DataGrid id="resultsGrid" height="100%" width="100%"
				 wordWrap="false"
				 horizontalScrollPolicy="auto"/>
	<s:controlBarContent>
		<s:HGroup verticalAlign="middle">
			<s:RadioButton label="{_exp2csvBtnLbl}" groupName="optiongroup" selected="true"/>
			<s:RadioButton label="{_exp2txtBtnLbl}" groupName="optiongroup"/>
			<s:Button label="{_exportButtonLbl}" id="Export" click="exportTo(event)" skinClass="widgets.InfoTemplates.ExportButtonSkin"/>
		</s:HGroup>
	</s:controlBarContent>
	<s:controlBarLayout>
		<s:HorizontalLayout horizontalAlign="right" paddingTop="3" paddingBottom="2" paddingRight="5" />
	</s:controlBarLayout>
</s:TitleWindow>
